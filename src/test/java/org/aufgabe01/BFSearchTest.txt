package org.aufgabe01;

import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class BFSearchTest {

    private Graph graph;

    @BeforeEach
    void setUp() {
        // Initialisiere den Graphen für jeden Testfall
        String filePath = "resources/graphs/graph01.gka";
        graph = GraphParser.makeGraphFromFile(filePath);
        assertNotNull(graph);
    }

    @AfterEach
    void tearDown() {
        // Räume Ressourcen nach jedem Testfall auf
        graph.clear();
        assertEquals(0, graph.getNodeCount());
        assertEquals(0, graph.getEdgeCount());
    }

    @Test
    void bfSearchTest() {
        // Neuer zufälliger Graph
        // Graph graph = new SingleGraph("testBFSearchGraph");
        // GraphParser.generateRandomGraph(graph);
        int count = 0;

        // Erwartete Ergebnisse definieren
        Queue<String> expectedVisitedNodes = new LinkedList<>();

        // Knoten hinzufügen
        for (int i = 0; i <= count; i++) {
            graph.addNode("A"+i);
        }


        // Besuchte Knoten aus dem Graphen abrufen
        List<String> actualVisitedNodes = new ArrayList<>();
        for (Node node : graph) {
            if (node.hasAttribute("visited")) {
                actualVisitedNodes.add(node.getId());
            }
        }

        // Überprüfen, ob die besuchten Knoten den erwarteten entsprechen
        assertEquals(expectedVisitedNodes.size(), actualVisitedNodes.size());
        //assertTrue(expectedVisitedNodes.containsAll(actualVisitedNodes));
    }

}
